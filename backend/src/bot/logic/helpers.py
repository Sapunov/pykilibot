import datetime
import logging
import typing as tp
import uuid

from django.conf import settings
from telegram import File, InlineKeyboardButton, InlineKeyboardMarkup
import boto3
from telegram.utils import helpers as telegram_helpers

from bot import models


logger = logging.getLogger(__name__)


def commands_availability(
    command: str, availability_alias: str, user: models.BotUser
) -> bool:
    def _test_availability():
        return (
            len(
                models.Assignment.get_available_for_user(
                    user, models.AssignmentType.Test
                )
            )
            > 0
        )

    if availability_alias == 'test':
        return _test_availability()

    return True


def get_user_commands(user: models.BotUser):
    roles_config = {
        'commands': {
            'upload_homework': {'name': '–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–º–∞—à–∫—É'},
            'upload_test': {'name': '–°–¥–∞—Ç—å —Ç–µ—Å—Ç', 'availability': 'test'},
            'review': {'name': '–ó–∞–¥–∞—á–∏ –Ω–∞ review'},
            'create_assignment': {'name': '–°–æ–∑–¥–∞—Ç—å –∞—Å—Å–∞–π–Ω–º–µ–Ω—Ç'},
            'view_assignments': {'name': '–ê—Å—Å–∞–π–Ω–º–µ–Ω—Ç—ã'},
        },
        'roles': {
            'student': ['upload_homework', 'upload_test'],
            'assistant': ['view_assignments'],
            'teacher': ['create_assignment', 'view_assignments'],
            'admin': [
                'upload_homework',
                'upload_test',
                'create_assignment',
                'view_assignments',
            ],
        },
    }
    role_commands = roles_config['roles'].get(user.role)

    if not role_commands:
        return []

    for command in role_commands:
        if command not in roles_config['commands']:
            continue

        command_config = roles_config['commands'][command]

        if 'availability' in command_config and not commands_availability(
            command, command_config['availability'], user
        ):
            continue

        yield {
            'alias': command,
            'name': command_config['name'],
        }


def inline_keyboard(
    data: tp.Any,
    prefix: str,
    name_col: str = 'name',
    alias_col: str = 'alias',
    url_col: str = 'url',
    column: bool = True,
    prefix_sep: str = ':',
) -> InlineKeyboardMarkup:
    def _extract_alias_or_url(
        item: tp.Any,
    ) -> tp.Tuple[tp.Optional[str], tp.Optional[str]]:
        alias = url = None

        try:
            alias = (
                item[alias_col]
                if isinstance(item, dict)
                else getattr(item, alias_col)
            )
        except (KeyError, AttributeError):
            pass

        try:
            url = (
                item[url_col]
                if isinstance(item, dict)
                else getattr(item, url_col)
            )
        except (KeyError, AttributeError):
            pass

        if alias is None and url is None:
            raise AssertionError('One of alias or url must be present')

        if alias is not None and url is not None:
            raise AssertionError('Only one of alias or url must be present')

        return alias, url

    buttons = []
    for item in data:
        name = (
            item[name_col]
            if isinstance(item, dict)
            else getattr(item, name_col)
        )
        alias, url = _extract_alias_or_url(item)

        button = (
            InlineKeyboardButton(
                name, callback_data=f'{prefix}{prefix_sep}{alias}'
            )
            if alias is not None
            else InlineKeyboardButton(name, url=url)
        )

        if column:
            button = [button]

        buttons.append(button)

    return InlineKeyboardMarkup(buttons if column else [buttons])


def upload_file_to_s3(file: File) -> str:
    boto_session = boto3.session.Session(
        aws_access_key_id=settings.AWS_ACCESS_KEY_ID,
        aws_secret_access_key=settings.AWS_SECRET_ACCESS_KEY,
        region_name=settings.REGION_NAME,
    )
    s3 = boto_session.client(
        service_name='s3',
        endpoint_url=settings.YC_S3_URL,
    )

    objectkey = f'{settings.TELEGRAM_BOT_S3_BUCKET_PREFIX}/{uuid.uuid4().hex}'

    s3.put_object(
        Bucket=settings.YC_S3_BUCKET,
        Key=objectkey,
        Body=file.download_as_bytearray(),
    )

    return objectkey


def escape_markdown(text: str) -> str:
    return telegram_helpers.escape_markdown(text, version=2)


def get_message(alias: str, escape_kwargs: bool = True, **kwargs):
    logger.info('Getting message for alias: %s', alias)
    messages = {
        'start_to_do': '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:',
        'wait_a_second': '–°–µ–∫—É–Ω–¥–æ—á–∫—É...\n',
        'error_retry': 'üò¢ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n–ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç, –∂–º–∏—Ç–µ /cancel.\n',
        'fallback': '–í—ã –¥–µ–ª–∞–µ—Ç–µ —á—Ç–æ-—Ç–æ, —á—Ç–æ —è –Ω–µ –æ–∂–∏–¥–∞—é –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç üò¨. \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ /cancel —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.\n',
        'welcome_to_do': '–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –í—ã–±–∏—Ä–∞–π—Ç–µ, —á—Ç–æ –¥–µ–ª–∞—Ç—å:\n',
        'from_what_group': '–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ò–∑ –∫–∞–∫–æ–π –≤—ã –≥—Ä—É–ø–ø—ã?\n',
        'unavailable_for_group': '–°—Ç—É–¥–µ–Ω—Ç–∞–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –±–æ—Ç –∏–ª–∏ —É–∂–µ –≤—Å–µ –¥–æ–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ.\n',
        'select_among_group_students': '–ö–ª–∞—Å—Å! –ù–∞–π–¥–∏—Ç–µ —Å–µ–±—è —Å—Ä–µ–¥–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã:\n',
        'send_me_your_github': '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à –ª–æ–≥–∏–Ω –Ω–∞ github.com\n',
        'no_github_account': '–¢–∞–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç –Ω–∞ github: *{github_login}*\n–í–∏–¥–∏–º–æ, –≤—ã —á—Ç–æ\\-—Ç–æ –Ω–µ —Ç–æ –≤–≤–µ–ª–∏ üòî\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n',
        'cannot_chech_github': '–ß—Ç–æ-—Ç–æ –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ github.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å-—á—É—Ç—å –ø–æ–∑–∂–µ.\n',
        'no_assignments': '–ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ —Å–¥–∞–≤–∞—Ç—å. –û—Ç–¥—ã—Ö–∞–π—Ç–µ\n',
        'select_homework_to_upload': '–ö–∞–∫—É—é –¥–æ–º–∞—à–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å?\n',
        'select_test_to_upload': '–ö–∞–∫–æ–π —Ç–µ—Å—Ç —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å?\n',
        'select_task_to_upload': '–ö–∞–∫—É—é –∑–∞–¥–∞—á—É —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å?\n–í—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ [—Å—Å—ã–ª–∫–µ]({gist_url})\n',
        'send_me_the_file': '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–¥–∏–Ω —Ñ–∞–π–ª —Å —Ä–µ—à–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .py\n',
        'wrong_file_format': '–ü—Ä–∏—Å–ª–∞–Ω–Ω—ã–π –≤–∞–º–∏ —Ñ–∞–π–ª –Ω–µ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç –Ω–∞ python. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —à–ª–µ—Ç–µ –∏–º–µ–Ω–Ω–æ —Å–∫—Ä–∏–ø—Ç –Ω–∞ python —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .py\n',
        'file_uploaded': '–í–∞—à–∞ –ø–æ—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ ‚è≥\n',
        'submission_created': '–î–ª—è –∑–∞–¥–∞—á–∏ ‚Ññ{task_id} \\(*{assignment_name}*\\) —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π [pull request]({pull_url})\\. –ó–∞—Ö–æ–¥–∏—Ç–µ\\.\n',
        'submission_created_staff': 'üéÅ\n–ü—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ\\!\n–ó–∞–¥–∞—á–∞ *‚Ññ{task_id}* \\({assignment_name}\\)\n–°—Ç—É–¥–µ–Ω—Ç: *{student_full_name}*\n[–°—Å—ã–ª–∫–∞]({pull_url})\n',
        'submission_needwork': 'ü§î\n–ü–æ –∑–∞–¥–∞—á–µ *‚Ññ{task_id}* \\({assignment_name}\\)\\ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–æ—á–∫–∏\\.\n[–°—Å—ã–ª–∫–∞]({pull_url})\n',
        'submission_accepted': 'üéâ\n–ó–∞–¥–∞—á—É *‚Ññ{task_id}* \\(**{assignment_name}**\\) –ø—Ä–∏–Ω—è–ª–∏\\.\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ\\, –º–æ–∂–µ—Ç –≤–∞–º –æ—Å—Ç–∞–≤–∏–ª–∏ –∫–∞–∫–æ–π\\-–Ω–∏–±—É–¥—å –¥–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\\.\n[–°—Å—ã–ª–∫–∞]({pull_url})\n',
        'comment_from_student': '[–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]({pull_url}) –æ—Ç {student_full_name} –≤ –∑–∞–¥–∞—á–µ ‚Ññ{task_id} \\({assignment_name}\\)\\.\n',
        'push_from_student': '{student_full_name} –≤–Ω–µ—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥ –∑–∞–¥–∞—á–∏ ‚Ññ{task_id} \\({assignment_name}\\)\\.\n[–°—Å—ã–ª–∫–∞]({pull_url})\\.\n',
        'invite_sent': '–î–ª—è –≤–∞—Å –±—ã–ª —Å–æ–∑–¥–∞–Ω [–Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π]({repo_url}) –Ω–∞ GitHub\\. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç—É–¥–∞ –¥–æ—Å—Ç—É–ø –Ω—É–∂–Ω–æ **–ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ**, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≤–∞–º –Ω–∞ –ø–æ—á—Ç—É\\. –ü–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–∫–∞–∑—ã–≤–∞–ª–∏ –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞ GitHub\\.\n',
        'assignment_created': '–ù–æ–≤—ã–π –∞—Å—Å–∞–π–Ω–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω\\.\n\n–¢–∏–ø: *{assignment_type}*\\.\n–ù–∞–∑–≤–∞–Ω–∏–µ: *{assignment_name}*\\.\n–ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä: *{assignment_seq}*\\.\n–ì—Ä—É–ø–ø–∞: *{group_name}*\\.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á: *{tasks_count}*\\.\nGist: {gist_url}\\.\n\n–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏–π –∏–∑ Gist –±—ã–ª –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω\\. \n–ß—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ gist —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å—Å–∞–π–Ω–º–µ–Ω—Ç–∞\\.\n\n–í–∞—à –∞—Å—Å–∞–π–Ω–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω\\, –Ω–æ —Å—Ç—É–¥–µ–Ω—Ç—ã –µ–≥–æ –Ω–µ –≤–∏–¥—è—Ç\\. **–í–∫–ª—é—á–∏—Ç—å –∞—Å—Å–∞–π–Ω–º–µ–Ω—Ç**\\?\n',
        'assignment_info': '–ù–∞–∑–≤–∞–Ω–∏–µ: *{assignment_name}*\\.\n–¢–∏–ø: *{assignment_type}*\\.\n–ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä: *{assignment_seq}*\\.\n–ì—Ä—É–ø–ø–∞: *{assignment_group_name}*\\.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á: *{assignment_tasks_count}*\\.\nGist: {assignment_gist_url}\\.\n\n**–ó–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:**\n \\- review: {by_status.review}\n \\- needwork: {by_status.needwork}\n \\- accepted: {by_status.accepted}\n',
        'me_response': '–ò–º—è –≤ telegram: *{tg_full_name}*\n–õ–æ–≥–∏–Ω telegram: *{tg_username}*\nTelegram ID: `{tg_id}`\n',
        'me_response_known': '–ò–º—è –≤ telegram: *{tg_full_name}*\n–õ–æ–≥–∏–Ω telegram: *{tg_username}*\nTelegram ID: `{tg_id}`\n\n–ì—Ä—É–ø–ø—ã: *{groups}*\nGitHub login: `{github_login}`\n–ò–º—è –≤ –≤–µ–¥–æ–º–æ—Å—Ç–∏: *{full_name}*\n',
    }

    if escape_kwargs:
        for key in kwargs:
            if isinstance(kwargs[key], str):
                kwargs[key] = escape_markdown(kwargs[key])

    message = messages[alias].format(**kwargs)
    return message


def extract_data(
    data: str,
    prefix: str,
    prefix_sep: str = ':',
    convert_to: tp.Optional[tp.Callable] = None,
) -> str:
    prefix_with_sep = prefix + prefix_sep

    if not data.startswith(prefix_with_sep):
        raise ValueError(f'{data} not startswith {prefix_with_sep}')

    new_start = len(prefix_with_sep)
    clean_data = data[new_start:]

    if convert_to is not None:
        return convert_to(clean_data)

    return clean_data


def build_task_list(
    assignment: models.Assignment, user: models.BotUser
) -> tp.List[dict]:
    submissions = models.Submission.objects.filter(
        author=user,
        real_assignment=assignment,
    )

    task_id_to_submission_map = {
        submission.task_id: submission for submission in submissions
    }

    def _create_task_name(
        task_id: int, submission_status: tp.Optional[str]
    ) -> str:
        ret = f'‚Ññ {task_id}'
        if submission_status is not None:
            ret += f' [{submission_status}]'
        return ret

    for i in range(assignment.tasks_count):
        task_id = i + 1
        task_submission = task_id_to_submission_map.get(task_id)
        status = task_submission.status if task_submission else None

        ret = {'name': _create_task_name(task_id, status)}

        if status is None:
            ret.update({'alias': task_id})
        elif task_submission.pull_url is not None:
            ret.update({'url': task_submission.pull_url})
        else:
            # For tasks in processing stage
            continue

        yield ret


def status_elapsed_formatted(
    elapsed_time: datetime.timedelta,
    threshold: int,
) -> tp.Optional[str]:
    if not elapsed_time:
        return None

    days = elapsed_time.days
    hours = elapsed_time.seconds // 3600

    if days > threshold:
        return f'{days}d‚ùóÔ∏è'

    if days > 0:
        return f'{days}d'

    if hours > 0:
        return f'{hours}h'

    return None
